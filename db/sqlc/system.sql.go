// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: system.sql

package db

import (
	"context"
)

const createClass = `-- name: CreateClass :one
    INSERT INTO class (
        name
    )VALUES(
        $1
    )RETURNING id, name, created_ad, updated_at
`

func (q *Queries) CreateClass(ctx context.Context, name string) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass, name)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const createLevel = `-- name: CreateLevel :one
    INSERT INTO level (
        name
    )VALUES(
        $1
    )RETURNING id, name, created_ad, updated_at
`

func (q *Queries) CreateLevel(ctx context.Context, name string) (Level, error) {
	row := q.db.QueryRowContext(ctx, createLevel, name)
	var i Level
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const createStatus = `-- name: CreateStatus :one
    INSERT INTO status (
        name
    )VALUES(
        $1
    )RETURNING id, name, created_ad, updated_at
`

func (q *Queries) CreateStatus(ctx context.Context, name string) (Status, error) {
	row := q.db.QueryRowContext(ctx, createStatus, name)
	var i Status
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const getClass = `-- name: GetClass :many
    SELECT id, name, created_ad, updated_at FROM class c
        ORDER BY c.id
`

func (q *Queries) GetClass(ctx context.Context) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, getClass)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Class{}
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAd,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLevel = `-- name: GetLevel :many
    SELECT id, name, created_ad, updated_at FROM level l
        ORDER BY id
`

func (q *Queries) GetLevel(ctx context.Context) ([]Level, error) {
	rows, err := q.db.QueryContext(ctx, getLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Level{}
	for rows.Next() {
		var i Level
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAd,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatus = `-- name: GetStatus :many
    SELECT id, name, created_ad, updated_at FROM status s
        ORDER BY s.id
`

func (q *Queries) GetStatus(ctx context.Context) ([]Status, error) {
	rows, err := q.db.QueryContext(ctx, getStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Status{}
	for rows.Next() {
		var i Status
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAd,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
