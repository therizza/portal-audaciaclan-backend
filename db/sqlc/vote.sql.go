// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: vote.sql

package db

import (
	"context"
	"database/sql"
)

const getInformationUserVote = `-- name: GetInformationUserVote :one
    SELECT id, id_user, old_clan, reason_exit, friend, play_sod, play_bc, availability_bc, description, created_ad, updated_at 
        FROM information_user_vote iuv 
        WHERE iuv.id_user = $1
        LIMIT 1
`

func (q *Queries) GetInformationUserVote(ctx context.Context, idUser int32) (InformationUserVote, error) {
	row := q.db.QueryRowContext(ctx, getInformationUserVote, idUser)
	var i InformationUserVote
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.OldClan,
		&i.ReasonExit,
		&i.Friend,
		&i.PlaySod,
		&i.PlayBc,
		&i.AvailabilityBc,
		&i.Description,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const informationUserVote = `-- name: InformationUserVote :one
    INSERT INTO information_user_vote (
        id_user,
        old_clan,
        reason_exit,
        friend,
        play_sod,
        play_bc,
        availability_bc,
        description
    )VALUES(
        $1, $2, $3, $4, $5, $6, $7, $8
    )RETURNING id, id_user, old_clan, reason_exit, friend, play_sod, play_bc, availability_bc, description, created_ad, updated_at
`

type InformationUserVoteParams struct {
	IDUser         int32          `json:"id_user"`
	OldClan        sql.NullString `json:"old_clan"`
	ReasonExit     sql.NullString `json:"reason_exit"`
	Friend         sql.NullString `json:"friend"`
	PlaySod        bool           `json:"play_sod"`
	PlayBc         bool           `json:"play_bc"`
	AvailabilityBc bool           `json:"availability_bc"`
	Description    sql.NullString `json:"description"`
}

func (q *Queries) InformationUserVote(ctx context.Context, arg InformationUserVoteParams) (InformationUserVote, error) {
	row := q.db.QueryRowContext(ctx, informationUserVote,
		arg.IDUser,
		arg.OldClan,
		arg.ReasonExit,
		arg.Friend,
		arg.PlaySod,
		arg.PlayBc,
		arg.AvailabilityBc,
		arg.Description,
	)
	var i InformationUserVote
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.OldClan,
		&i.ReasonExit,
		&i.Friend,
		&i.PlaySod,
		&i.PlayBc,
		&i.AvailabilityBc,
		&i.Description,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}
