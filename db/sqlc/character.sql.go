// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: character.sql

package db

import (
	"context"
)

const createCharacter = `-- name: CreateCharacter :one
    INSERT INTO "characters" (
        id_user,
        "name",
        class_id, 
        "level",
        main
    )VALUES(
        $1, $2, $3, $4, $5
    )RETURNING id, id_user, name, class_id, level, main, created_ad, updated_at
`

type CreateCharacterParams struct {
	IDUser  int32  `json:"id_user"`
	Name    string `json:"name"`
	ClassID int32  `json:"class_id"`
	Level   int32  `json:"level"`
	Main    bool   `json:"main"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter,
		arg.IDUser,
		arg.Name,
		arg.ClassID,
		arg.Level,
		arg.Main,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Name,
		&i.ClassID,
		&i.Level,
		&i.Main,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const getMainCharacter = `-- name: GetMainCharacter :one
    SELECT id, id_user, name, class_id, level, main, created_ad, updated_at 
        FROM "characters"
        WHERE id_user = $1
            and main = $2
        LIMIT 1
`

type GetMainCharacterParams struct {
	IDUser int32 `json:"id_user"`
	Main   bool  `json:"main"`
}

func (q *Queries) GetMainCharacter(ctx context.Context, arg GetMainCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, getMainCharacter, arg.IDUser, arg.Main)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Name,
		&i.ClassID,
		&i.Level,
		&i.Main,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCharacter = `-- name: UpdateCharacter :one
    update "characters"
        set
            main = $2,
            updated_at = NOW ()
        where id_user = $1
        RETURNING id, id_user, name, class_id, level, main, created_ad, updated_at
`

type UpdateCharacterParams struct {
	IDUser int32 `json:"id_user"`
	Main   bool  `json:"main"`
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, updateCharacter, arg.IDUser, arg.Main)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Name,
		&i.ClassID,
		&i.Level,
		&i.Main,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMainCharacter = `-- name: UpdateMainCharacter :one
    update "characters" 
        set 
            main = $2, 
            updated_at = NOW () 
        where id_user = $1
            and id = $3
            RETURNING id, id_user, name, class_id, level, main, created_ad, updated_at
`

type UpdateMainCharacterParams struct {
	IDUser int32 `json:"id_user"`
	Main   bool  `json:"main"`
	ID     int32 `json:"id"`
}

func (q *Queries) UpdateMainCharacter(ctx context.Context, arg UpdateMainCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, updateMainCharacter, arg.IDUser, arg.Main, arg.ID)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.Name,
		&i.ClassID,
		&i.Level,
		&i.Main,
		&i.CreatedAd,
		&i.UpdatedAt,
	)
	return i, err
}
